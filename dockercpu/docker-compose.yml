version: "3.9"

# docker compose -f ./docker-compose.yml up -d
# To build also: docker compose -f ./docker-compose.yml up --build -d
# docker compose -f ./docker-compose.yml down --volumes
# docker compose -f ./docker-compose.yml logs -f --tail=100
# docker compose -f ./docker-compose.yml logs -f --no-color --tail=100
# docker compose -f ./docker-compose.yml logs -f -t --tail=100
#
# To execute another /bin/bash at the currently running container "ttslearncont":
# docker exec -it ttslearncont /bin/bash
# To execute another /bin/bash at the currently running container "ttslearncont", as root (for example to do `apt-get update`):
# docker exec -u root -it ttslearncont /bin/bash
#
# Customize jupyterlab setting (/home/jovyan/.jupyter):
# - Disable Settings->autosave documents
# - Settings->Settings editor: Jupyterlab Code Formatter: Autoformat code when save the notebook
# - Settings->Settings editor: Jupyterlab Code Formatter: Suppress formatter errors
#
# When commit the ipynb, before doing Save, MUST DO Edit->Clear Output of All Cells
#
# Usage of jupyterlab: https://www.idnet.co.jp/column/page_187.html
# - `%time wav, sr = dnntts_engine.tts("あらゆる現実を、すべて自分のほうへねじ曲げたのだ。")` to measure performance
# - `!pip3 freeze | grep jupyter` to execute shell command inside code cell
# - `result = !pip3 list` will store the execution result in result variable
# - `packages = [p.split() for p in result if "--" not in p]`
# - Help: `from IPython.display import Audio` `Audio?` press Shift-Enter, then help of Audio will be printed
# - In code cell then right click and Open Variable Inspector to see variable content.
#
# Using vscode:
# 1. docker compose -f ./docker-compose.yml up -d
# 2. In vscode, use ">Dev Container" (Command+Shift+p) to attach to ttslearncont container.
# 3. Open ipynb
# When using vscode and attach to the container, `docker compose -f ./docker-compose.yml logs -f --tail=100` shows nothing because DIRECTLY open ipynb file VIA container (NOT via http)!
# See the below "OUTPUT" tab, with selecting "Jupyter", "Ruff", etc.
#
# Install vscode extensions, etc. inside container:
# https://code.visualstudio.com/docs/devcontainers/attach-container
# To view or update it (extensions etc.) after attaching, select Dev Containers: Open Container Configuration File from the Command Palette.
#   - Location of setting file "imagename.json" is in the host:~/Library/Application Support/Code/User/globalStorage ... (so it is PERSISTENT)
# To activate autocompletion, inside the container, install and ENABLE the Python, Python Debugger extension etc:
# "charliermarsh.ruff", "ms-python.debugpy", "ms-python.python", "ms-python.vscode-pylance", "ms-toolsai.jupyter",
# "ms-toolsai.jupyter-keymap", "ms-toolsai.jupyter-renderers", "ms-toolsai.vscode-jupyter-cell-tags", "ms-toolsai.vscode-jupyter-slideshow"
# Black formatter in vscode extension is NOT good for notebook... Use ruff instead.
#
# >Preferences: Open Settings (UI)
# search for "formatoncellexecution" in "Remote", then enable all.
# search for "formatonsave" in "Remote", then enable all.
#
# "settings": {
#         "python.defaultInterpreterPath": "/home/jovyan/venv/bin/ipython3",
#         "editor.formatOnSave": true,
#         "notebook.formatOnSave.enabled": true,
#         "notebook.formatOnCellExecution": true,
#         "ruff.importStrategy": "useBundled",
#         "editor.defaultFormatter": "charliermarsh.ruff",
#         "[python]": {
#                 "editor.formatOnSave": true,
#                 "editor.defaultFormatter": "charliermarsh.ruff",
#                 "editor.codeActionsOnSave": {
#                         "source.fixAll": "explicit",
#                         "source.organizeImports": "explicit",
#                         "source.fixAll.ruff": "explicit",
#                         "source.organizeImports.ruff": "explicit"
#                 }
#         },
#         "notebook.codeActionsOnSave": {
#                 "notebook.source.fixAll": "explicit",
#                 "notebook.source.organizeImports": "explicit",
#                 "notebook.source.fixAll.ruff": "explicit",
#                 "notebook.source.organizeImports.ruff": "explicit"
#         },
#         "editor.codeActionsOnSave": {
#                 "source.fixAll": "explicit",
#                 "source.organizeImports": "explicit"
#         }
# },
#
# Sort import using Command palette > Organize Imports, AT EACH CELL!!!!
# Organize when inside Editor MODE!
#
services:
  notebook:
    build:
      context: .
      dockerfile: Dockerfile
    image: jupyterlab-ttslearn
    container_name: ttslearncont
    # entrypoint: >
    # jupyter-lab
    # --ip=0.0.0.0
    # --port=8888
    # --no-browser
    # --IdentityProvider.token=''
    # --ServerApp.disable_check_xsrf=True
    # --notebook-dir=/home/jovyan/work
    command: "bash /home/jovyan/work/dockercpu/start-command.sh"
    expose:
      - 8888
    ports:
    - 8889:8888
    restart: always
    volumes:
    - ../:/home/jovyan/work
    - ./jovyan/dotcache/ttslearn:/home/jovyan/.cache/ttslearn
    - ./jovyan/dotjupyter:/home/jovyan/.jupyter
    environment:
    - JUPYTER_ENABLE_LAB=yes
